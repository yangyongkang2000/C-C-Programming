//
//  prime.hpp
//  prime
//
//  Created by 杨永康 on 2021/2/21.
//

#ifndef prime_h
#define prime_h
#define _Parallel_Expand_(l) auto t##l=std::async(std::launch::async, calc<T,n,m[l],m[l+1],e>);
namespace prime {
using ULL=unsigned long long int;
template<typename T=ULL>
constexpr T  mod[5]={4,3,3,3,3};
template<typename T=ULL>
constexpr T  delta[5][4]={{2,4,2,2},{2,6,2},{2,4,4},{4,2,4},{6,2,2}};
template<typename T=ULL>
constexpr T table[5][10][2]={{
    {1,0},
    {0,0},
    {1,1},
    {0,1},
    {3,2},
    {2,2},
    {1,2},
    {0,2},
    {1,3},
    {0,3},
},{
    {1,0},
    {0,0},
    {1,1},
    {0,1},
    {5,2},
    {4,2},
    {3,2},
    {2,2},
    {1,2},
    {0,2}
},{
    {1,0},
    {0,0},
    {1,1},
    {0,1},
    {3,2},
    {2,2},
    {1,2},
    {0,2},
    {3,0},
    {2,0}
},{
    {3,0},
    {2,0},
    {1,0},
    {0,0},
    {3,1},
    {2,1},
    {1,1},
    {0,1},
    {1,2},
    {0,2}
},{
    {1,0},
    {0,0},
    {5,1},
    {4,1},
    {3,1},
    {2,1},
    {1,1},
    {0,1},
    {1,2},
    {0,2}
}};
template<typename T=ULL>
constexpr T result[1083]={0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 1, 2, 0, 2, 1, 2, 1, 3, \
    0, 3, 1, 3, 0, 2, 0, 3, 1, 2, 1, 4, 0, 4, 0, 2, 1, 3, 0, 4, 1, 3, 1, \
    4, 0, 5, 1, 4, 0, 3, 0, 5, 1, 3, 0, 4, 0, 6, 1, 3, 1, 5, 0, 6, 0, 2, \
    1, 5, 0, 6, 1, 5, 1, 5, 0, 7, 0, 4, 1, 5, 0, 8, 1, 5, 0, 4, 0, 9, 1, \
    4, 0, 5, 0, 7, 0, 3, 1, 6, 0, 8, 1, 5, 1, 6, 0, 8, 1, 6, 1, 7, 0, 10, \
    1, 6, 0, 6, 0, 12, 0, 4, 0, 5, 0, 10, 0, 3, 1, 7, 0, 9, 1, 6, 0, 5, \
    0, 8, 1, 7, 1, 8, 0, 11, 0, 6, 0, 5, 0, 12, 1, 4, 1, 8, 0, 11, 0, 5, \
    1, 8, 0, 10, 0, 5, 1, 6, 0, 13, 1, 9, 0, 6, 0, 11, 1, 7, 0, 7, 0, 14, \
    1, 6, 1, 8, 0, 13, 0, 5, 0, 8, 0, 11, 1, 7, 1, 9, 0, 13, 1, 8, 1, 9, \
    0, 14, 0, 7, 0, 7, 0, 19, 0, 6, 1, 8, 0, 13, 0, 7, 0, 9, 0, 11, 0, 7, \
    1, 7, 0, 12, 1, 9, 1, 7, 0, 15, 1, 9, 0, 9, 0, 18, 1, 8, 1, 9, 0, 16, \
    0, 6, 0, 9, 0, 16, 1, 9, 0, 8, 0, 14, 1, 10, 0, 9, 0, 16, 1, 8, 0, 9, \
    0, 19, 1, 7, 1, 11, 0, 16, 0, 7, 1, 14, 0, 16, 1, 8, 1, 12, 0, 17, 0, \
    10, 0, 8, 0, 19, 1, 8, 0, 11, 0, 21, 0, 9, 0, 10, 0, 15, 0, 8, 1, 12, \
    0, 17, 1, 9, 1, 10, 0, 15, 1, 11, 0, 11, 0, 20, 0, 7, 0, 10, 0, 24, \
    0, 6, 1, 11, 0, 19, 0, 9, 1, 13, 0, 17, 0, 10, 0, 9, 0, 16, 1, 13, 1, \
    10, 0, 20, 1, 9, 0, 10, 0, 22, 1, 8, 0, 14, 0, 18, 0, 8, 1, 14, 0, \
    18, 0, 10, 1, 11, 0, 22, 0, 13, 1, 10, 0, 19, 1, 12, 0, 9, 0, 27, 1, \
    11, 0, 11, 0, 21, 0, 7, 1, 14, 0, 17, 1, 11, 0, 13, 0, 20, 0, 13, 1, \
    11, 0, 21, 0, 10, 0, 11, 0, 30, 1, 11, 1, 12, 0, 21, 0, 9, 0, 14, 0, \
    19, 1, 13, 1, 11, 0, 21, 0, 14, 1, 13, 0, 21, 1, 12, 0, 13, 0, 27, 1, \
    12, 0, 12, 0, 24, 0, 9, 1, 16, 0, 28, 1, 12, 1, 13, 0, 24, 1, 15, 0, \
    13, 0, 23, 0, 14, 0, 11, 0, 29, 1, 11, 0, 14, 0, 23, 0, 9, 1, 19, 0, \
    22, 1, 13, 0, 13, 0, 23, 0, 13, 1, 15, 0, 27, 1, 15, 0, 14, 0, 32, 1, \
    11, 0, 14, 0, 23, 0, 11, 0, 17, 0, 24, 1, 11, 1, 15, 0, 25, 0, 14, 0, \
    17, 0, 22, 0, 13, 0, 14, 0, 30, 0, 10, 1, 13, 0, 30, 0, 11, 1, 19, 0, \
    23, 0, 11, 0, 11, 0, 23, 1, 18, 0, 14, 0, 24, 1, 13, 0, 13, 0, 31, 1, \
    11, 1, 16, 0, 26, 0, 12, 1, 19, 0, 25, 0, 12, 0, 13, 0, 29, 1, 16, 0, \
    15, 0, 27, 1, 12, 0, 15, 0, 32, 1, 12, 1, 14, 0, 27, 0, 13, 1, 20, 0, \
    26, 0, 15, 1, 19, 0, 26, 1, 18, 1, 17, 0, 31, 0, 12, 0, 16, 0, 41, 0, \
    10, 1, 14, 0, 28, 0, 15, 0, 18, 0, 25, 1, 17, 1, 16, 0, 27, 1, 21, 0, \
    15, 0, 29, 1, 13, 0, 19, 0, 41, 1, 14, 1, 16, 0, 31, 0, 11, 0, 21, 0, \
    33, 0, 15, 1, 17, 0, 28, 1, 21, 0, 16, 0, 30, 1, 16, 0, 16, 0, 39, 0, \
    11, 1, 19, 0, 30, 0, 14, 0, 24, 0, 31, 1, 18, 0, 19, 0, 24, 0, 16, 1, \
    17, 0, 37, 0, 14, 0, 15, 0, 39, 1, 14, 0, 15, 0, 31, 0, 15, 1, 21, 0, \
    31, 0, 15, 1, 19, 0, 29, 0, 18, 1, 19, 0, 31, 1, 18, 0, 19, 0, 39, 0, \
    14, 1, 17, 0, 35, 0, 15, 1, 21, 0, 30, 1, 17, 0, 17, 0, 31, 0, 26, 1, \
    18, 0, 32, 1, 16, 0, 15, 0, 44, 0, 14, 0, 18, 0, 30, 0, 15, 1, 22, 0, \
    34, 0, 17, 0, 14, 0, 38, 1, 21, 0, 16, 0, 32, 0, 16, 0, 14, 0, 39, 1, \
    18, 1, 20, 0, 34, 0, 17, 0, 20, 0, 29, 1, 16, 1, 21, 0, 34, 1, 22, 1, \
    22, 0, 33, 0, 18, 0, 17, 0, 51, 1, 18, 0, 17, 0, 32, 0, 15, 0, 25, 0, \
    31, 0, 20, 1, 19, 0, 39, 1, 18, 1, 17, 0, 33, 1, 17, 0, 21, 0, 46, 0, \
    18, 0, 19, 0, 36, 0, 14, 1, 25, 0, 39, 1, 21, 1, 18, 0, 37, 1, 23, 0, \
    19, 0, 34, 0, 20, 0, 19, 0, 48, 0, 15, 0, 17, 0, 34, 0, 15, 1, 31, 0, \
    31, 1, 20, 0, 18, 0, 35, 0, 23, 1, 20, 0, 47, 0, 18, 0, 18, 0, 43, 1, \
    17, 0, 20, 0, 36, 0, 18, 1, 24, 0, 34, 1, 18, 0, 20, 0, 33, 1, 25, 0, \
    23, 0, 37, 1, 19, 0, 22, 0, 45, 0, 16, 0, 18, 0, 45, 0, 17, 1, 27, 0, \
    32, 1, 17, 0, 19, 0, 35, 1, 26, 0, 17, 0, 39, 1, 20, 0, 23, 0, 52, 0, \
    13, 1, 25, 0, 37, 0, 17, 1, 28, 0, 36, 0, 18, 0, 18, 0, 42, 0, 25, 1, \
    23, 0, 39, 1, 18, 0, 20, 0, 51, 1, 18, 1, 22, 0, 42, 0, 18, 0, 25, 0, \
    36, 1, 21, 1, 27, 0, 40, 0, 26, 1, 22, 0, 39, 0, 19, 0, 19, 0, 57, 1, \
    18, 1, 24, 0, 44, 0, 19, 0, 27, 0, 37, 1, 24, 1, 24, 0, 39, 0, 25, 1, \
    21, 0, 40, 0, 20, 0, 27, 0, 54, 0, 20};
template<typename T>
constexpr T prime_list[100]={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, \
    67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, \
    139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, \
    223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, \
    293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, \
    383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, \
    463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541};
constexpr bool prime_bool[1001]={0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, \
    1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, \
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, \
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \
    0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, \
    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \
    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, \
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, \
    0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, \
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, \
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, \
    0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \
    0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \
    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, \
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, \
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \
    0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, \
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, \
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, \
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, \
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, \
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, \
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
    0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0};
template<typename T=ULL>
constexpr inline T qpow(T a,T n,T p)
{
    T result=1;
    while(n){
       if(n&1)
           result=result*a%p;
        a=a*a%p;
        n>>=1;
    }
    return result;
}
template<typename T,ULL index,ULL M=1>
inline constexpr bool test_prime(const T x)
{
    if constexpr(M>=index)
        return true;
    else{
    if(x%prime_list<T>[M])
        return test_prime<T,index,M+1>(x);
      return false;
    }
}
template<typename T=ULL>
inline constexpr bool test(const T x)
{
    if(x<1001) return prime_bool[x];
    if(!test_prime<T,10>(x)) return false;
    T d=x-1;
    T r=0;
    while (d%2==0)
    {
        d>>=1;
        r++;
    }
    for (auto a : {2,7,61})
        {
            T v = qpow<T>(a, d, x);
            if (v <= 1 || v == x - 1)
                continue;
            for (int i = 0; i < r; ++i)
            {
                v = v * v % x;
                if (v == x - 1 && i != r - 1)
                {
                    v = 1;
                    break;
                }
                if (v == 1)
                    return false;
            }
            if (v != 1)
                return false;
        }
    return true;
}
static constexpr auto Delta=delta<ULL>;
static constexpr auto Mod=mod<ULL>;
template<typename T=ULL,T N,T L,T r,T e>
inline ULL calc()
{
    constexpr T index=L%10;
    T i=table<T>[e][index][1];
    T l=L+table<T>[e][index][0],_count=0;
    while(l<r)
    {
        if(prime::test(l)&&prime::test(N-l))
           _count++;
        l+=Delta[e][i=i%Mod[e]];
        i++;
    }
    return _count;
}
template<typename T=ULL,T N,T n,T m=0>
inline constexpr void add(T &_count)
{
    if constexpr(m==n)
        return;
    else{
    if constexpr(test(N-prime_list<T>[m]))
        _count++;
        add<T,N, n,m+1>(_count);
    }
}
template<typename T=ULL,T n,T deep=99>
inline constexpr ULL total()
{
    if constexpr(n&1)
        return test(n-2);
    if constexpr(n<=prime_list<T>[deep]*2)
        return result<T>[n];
    T  _count=0;
    constexpr T e=(n%10)/2;
    add<T,n, deep+1>(_count);
    if(n/2-prime_list<T>[deep]<16000)
        return _count+calc<T,n,prime_list<T>[deep]+1, n/2, e>();
    constexpr T s=prime_list<T>[deep]+1;
    constexpr T a=n/2-s+1;
    constexpr T k=a/16;
    constexpr T m[17]={s, s + k, s+ 2 *k, s + 3* k, s + 4 *k, s+ 5 *k, s + 6* k, s + 7 *k,
     s + 8 *k, s + 9* k, s + 10 *k, s + 11* k, s + 12 *k, s+ 13* k, s + 14* k,
        s + 15 *k, n/2+1};
    _Parallel_Expand_(0)
    _Parallel_Expand_(1)
    _Parallel_Expand_(2)
    _Parallel_Expand_(3)
    _Parallel_Expand_(4)
    _Parallel_Expand_(5)
    _Parallel_Expand_(6)
    _Parallel_Expand_(7)
    _Parallel_Expand_(8)
    _Parallel_Expand_(9)
    _Parallel_Expand_(10)
    _Parallel_Expand_(11)
    _Parallel_Expand_(12)
    _Parallel_Expand_(13)
    _Parallel_Expand_(14)
    _Parallel_Expand_(15)
    return t0.get()+t1.get()+t2.get()+t3.get()+t4.get()+t5.get()+t6.get()+t7.\
    get()+t8.get()+t9.get()+t10.get()+t11.get()+t12.get()+t13.get()+t14.\
    get()+t15.get()+_count;
}
}

#endif /* prime_h */
